#!/bin/bash

### BEGIN INIT INFO
# Provides:           PiDACS server
# Required-Start:     $local_fs $syslog $network
# Required-Stop:      $local_fs $syslog $network
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  PiDACS server
# Description:        PiDACS server
### END INIT INFO

###############################################################################
#
#  PACKAGE:  Raspberry Pi Data Acquisition and Control System (PiDACS)
#     FILE:  pidacsd
#    TITLE:  PiDACS server daemon script (pidacsd)
# FUNCTION:  start, stop, or restart an instance of the PiDACS server daemon.
#    USAGE:  pidacsd is installed using the option script.  It is executed
#            automatically by the system initialization daemon (init.d) and
#            from the command line (see usage examples below).
#   AUTHOR:  papamac
#  VERSION:  1.0.1
#     DATE:  January 19, 2020
#
#
# MIT LICENSE:
#
# Copyright (c) 2019-2020 David A. Krause, aka papamac
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# allcopies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# DESCRIPTION:
#
# **************************** needs work *************************************
#
# DEPENDENCIES/LIMITATIONS:
#
# **************************** needs work *************************************
#
###############################################################################

# Define daemon variables and functions.

n=$'\e[0m'                              # Reset all attributes (normal).
t=$'\e[1m'                              # Set character attribute to bright.
r=$'\e[31m'                             # Set foreground color to red.
g=$'\e[32m'                             # Set foreground color to green.
daemon_file=$0                          # Full path name to daemon file.
daemon_name=${daemon_file##*/}          # Last segment of path name.
program_name=pidacs-s                   # Executable program name.
pidfile=/var/run/$daemon_name.pid       # PID file.

function errmsg { echo "$n$r$t$daemon_name: $1$n" >&2; }
function infomsg { echo "$g$t$daemon_name:$n $1"; }

function status {
    echo
    infomsg "statusing daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    start-stop-daemon \
        --quiet \
        --status \
        --pidfile $pidfile 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon is running ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon not running, but PID file exists ($exit_status)$n" ;;
        2) infomsg "     exit status:  $y${t}daemon not running ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown status ($exit_status)$n" ;;
    esac
}

function start {
    program_file=/usr/local/bin/$program_name  # Executable program path.
                                        #   usr/local segment may be edited
                                        #   by the option script.
    port_number=${daemon_name##*[a-z]}  # IP port number from daemon name.
    port_names='gg0 gg1'                # Default port names.  'gg0 gg1' may
                                        #   be edited by the option script.
    echo
    infomsg " starting daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    infomsg "    program file:  $b$t$program_file$n"
    infomsg "     port number:  $y$t$port_number$n"
    infomsg "      port names:  $y$t$port_names$n"
    start-stop-daemon \
        --quiet \
        --start \
        --background \
        --make-pidfile \
        --pidfile $pidfile \
        --startas $program_file \
        -- -dP $port_number $port_names 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon started ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon already running ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown error ($exit_status)$n" ;;
    esac
}

function stop {
    echo
    infomsg " stopping daemon:  $y$t$daemon_name$n"
    infomsg "    program name:  $y$t$program_name$n"
    infomsg "     daemon file:  $b$t$daemon_file$n"
    infomsg "        PID file:  $b$t$pidfile$n"
    start-stop-daemon \
        --quiet \
        --stop \
        --retry 5 \
        --pidfile $pidfile \
        --remove-pidfile 2>&1
    exit_status=$?
    case $exit_status in
        0) infomsg "     exit status:  daemon stopped ($exit_status)" ;;
        1) infomsg "     exit status:  $y${t}daemon already stopped ($exit_status)$n" ;;
        2) infomsg "     exit status:  $r${t}daemon not stopped after retry ($exit_status)$n" ;;
        ?) infomsg "     exit status:  $r${t}unknown error ($exit_status)$n" ;;
    esac
}

# Go do it ...

if [[ $daemon_name == "pidacsd" ]]; then

    # The daemon name has no IP port number.  Get a port number from the -P
    # option (or default) and use it to execute a previously edited/installed
    # version of this script (if any) in /etc/init.d.

    # Parse arguments and check for errors.

    usage="usage: pidacsd [-h][-I IP port number] {status|start|stop|restart}"
    declare -i port_number=50000        # Default IP port number.
    while getopts ':hP:' opt; do
        case $opt in
            h) echo "$usage"
               exit 0 ;;
            P) port_number=${OPTARG:-$port_number} ;;
            ?) errmsg "unrecognized option $1"
               echo "$usage"
               exit 10 ;;
        esac
    done
    if [[ $(((port_number < 49152) || (port_number > 65535))) = 1 ]]; then
        errmsg "invalid IP port number ($port_number)"
        exit 10
    fi
    shift $(($OPTIND - 1))
    cmd=$1
    if [[ ! $cmd ]]; then
        errmsg "missing command"
        echo "$usage"
        exit 10
    fi

    # Execute previously installed daemon.

    installed_daemon=/etc/init.d/pidacsd$port_number
    if [[ -f $installed_daemon ]]; then
        $installed_daemon $cmd
        exit_status=$?
        echo
    else
        errmsg "$installed_daemon: file not found"
        exit_status=10
    fi

else

    # The daemon name includes an IP port number, so it must have been
    # previously edited and installed by the option script.  Execute the
    # status, start, stop, or restart command within this script.

    cmd=$1
    case $cmd in
        status)  status ;;
        start)   start ;;
        stop)    stop ;;
        restart) stop; start ;;
        *)       errmsg "unrecognized command ($cmd)"
                 echo "usage: $daemon_name {status|start|stop|restart}"
                 exit_status=10 ;;
    esac
fi
exit $exit_status
